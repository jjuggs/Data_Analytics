Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000 
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 id
ii. Hours = 15652 business_id
iii. Category = 2643 business_id
iv. Attribute = 1115 business_id
v. Review = 10000 id, 8090 business_id, 9581 user_id
vi. Checkin = 493 business_id
vii. Photo = 10000 id, 6493 business_id
viii. Tip = 537 user_id, 3979 business_id
ix. User = 10000 id
x. Friend = 11 user_id
xi. Elite_years = 2780 user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
SELECT *
FROM user
WHERE id IS NULL OR
name IS NULL OR
review_count IS NULL OR
yelping_since IS NULL OR
useful IS NULL OR
funny IS NULL OR
fans IS NULL OR
average_stars IS NULL OR
compliment_hot IS NULL OR
compliment_more IS NULL OR
compliment_profile IS NULL OR
compliment_cute IS NULL OR
compliment_list IS NULL OR
compliment_note IS NULL OR
compliment_plain IS NULL OR
compliment_cool IS NULL OR
compliment_funny IS NULL OR
compliment_writer IS NULL OR
compliment_photos IS NULL

	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT city, SUM(review_count) AS total_review_count
	FROM business
	GROUP BY city
	ORDER BY total_review_count DESC

		
	Copy and Paste the Result Below:
+-----------------+--------------------+
| city            | total_review_count |
+-----------------+--------------------+
| Las Vegas       |              82854 |
| Phoenix         |              34503 |
| Toronto         |              24113 |
| Scottsdale      |              20614 |
| Charlotte       |              12523 |
| Henderson       |              10871 |
| Tempe           |              10504 |
| Pittsburgh      |               9798 |
| Montréal        |               9448 |
| Chandler        |               8112 |
| Mesa            |               6875 |
| Gilbert         |               6380 |
| Cleveland       |               5593 |
| Madison         |               5265 |
| Glendale        |               4406 |
| Mississauga     |               3814 |
| Edinburgh       |               2792 |
| Peoria          |               2624 |
| North Las Vegas |               2438 |
| Markham         |               2352 |
| Champaign       |               2029 |
| Stuttgart       |               1849 |
| Surprise        |               1520 |
| Lakewood        |               1465 |
| Goodyear        |               1155 |
+-----------------+--------------------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars AS star_rating, SUM(review_count) AS count
FROM business
WHERE city IS 'Avon'
GROUP BY star_rating
ORDER BY star_rating ASC


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT stars AS star_rating, SUM(review_count) AS count
FROM business
WHERE city IS 'Beachwood'
GROUP BY star_rating
ORDER BY star_rating ASC


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 |
+-------------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT id, name, review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3
			
	Copy and Paste the Result Below:
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+		


8. Does posing more reviews correlate with more fans?
Yes, there is a correlation between posting more reviews with having more fans. 

	Please explain your findings and interpretation of the results:
SELECT fan_range AS fan_range, COUNT(*) AS num_users, AVG(fantable.review_count) AS avg_reviews, AVG(fantable.fans) AS avg_fans
FROM (SELECT CASE
	WHEN fans BETWEEN 0 AND 9 THEN '0-9'
    	WHEN fans BETWEEN 10 AND 99 THEN '10-99'
    	WHEN fans BETWEEN 100 and 999 THEN '100-999'
END AS fan_range, review_count, fans
FROM user) AS fantable
GROUP BY fan_range
+-----------+-----------+---------------+----------------+
| fan_range | num_users |   avg_reviews |       avg_fans |
+-----------+-----------+---------------+----------------+
| 0-9       |      9690 | 15.0085655315 | 0.447265221878 |
| 10-99     |       294 | 283.326530612 |  25.5986394558 |
| 100-999   |        16 |         891.5 |         189.75 |
+-----------+-----------+---------------+----------------+
From the results above, based on the average number of reviews, the more reviews posted, the more the average number of fans.

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: 
	There are more words “love” than “hate” in the reviews.

	SQL code used to arrive at answer:
SELECT reactions, COUNT(*) AS counts
FROM (SELECT 
CASE
    WHEN LOWER(text) LIKE '%love%' THEN 'love'
    WHEN LOWER(text) LIKE '%hate%' THEN 'hate'
    ELSE 'no response'
END AS reactions
FROM review) AS subtable
GROUP BY reactions
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT id, name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10

	
	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
	
		
Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
The city I chose was Toronto and the category was pubs. There was a different distribution of hours for 2-3 star pubs in Toronto, with an average of 7 days open as compared to the 4-5 star pubs that were open on an average of 6 days. However it is to note that there is only 1 pub in the 2-3 star category and 2 pubs in the 4-5 star category.

SELECT CASE
    WHEN B.stars >= 4 THEN '4-5 stars'
    WHEN B.stars >=2 THEN '2-3 stars'
    ELSE stars
END AS star_rating, B.city, C.category, COUNT(DISTINCT B.id) AS id, COUNT(H.hours) AS days_open, COUNT(H.hours)/COUNT(DISTINCT B.id) AS avg_days_open
FROM ((business B INNER JOIN category C ON B.id = C.business_id) INNER JOIN hours H ON B.id = H.business_id)
WHERE category IS 'Pubs' AND city IS 'Toronto'
GROUP BY star_rating

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes there was a different number of reviews. For the pubs with 2-3 stars, the average number of review was 35 while for pubs with 4-5 stars had an average of 20 reviews. However it is to note that there was only 1 pub with 2-3 star rating and 2 pubs with 4-5 star rating, therefore the analysis would not be accurate due to the small amount of data present.

SELECT CASE
    WHEN B.stars >= 4 THEN '4-5 stars'
    WHEN B.stars >=2 THEN '2-3 stars'
    ELSE stars
END AS star_rating, B.city, C.category, COUNT(DISTINCT B.id) AS id, SUM(review_count) AS total_review, SUM(review_count)/COUNT(DISTINCT B.id) AS avg_review
FROM business B INNER JOIN category C ON B.id = C.business_id
WHERE category IS 'Pubs' AND city IS 'Toronto'
GROUP BY star_rating
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
From location data provided between the two groups, it can be seen that the postal code for pubs with a 2-3 star rating was from a zip code that started with M4 while pubs from the 4-5 star rating were from a zip code that started with M6. From these results, it can be inferred that pubs in the M6 zip code region are more likely to have a higher star rating.

SQL code used for analysis:
SELECT CASE
    WHEN B.stars >= 4 THEN '4-5 stars'
    WHEN B.stars >=2 THEN '2-3 stars'
    ELSE stars
END AS star_rating, B.city, C.category, B.id AS id, B.postal_code
FROM business B INNER JOIN category C ON B.id = C.business_id
WHERE category IS 'Pubs' AND city IS 'Toronto'
ORDER BY star_rating
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Average stars rating for businesses closed is 3.520 and still open is 3.679.
         
         
ii. Difference 2: Average review counts for businesses closed is 23.198 and still open is 31.757.         
         
         
SQL code used for analysis:
SELECT AVG(stars), AVG(review_count), is_open
FROM business
GROUP BY is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
An analysis of the business category and star rating to predict which category would have the most star rating.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
From this analysis, the data needed are the business and category data set. From these data sets, I would be able to group the category of business with their star rating and get the average stars for each business category. This would show the correlation between business category and star rating to make a data driven decision that would predict how well rated the business would be in a certain sector.

However this data would be very generic as it does not take into account the location of where the business category would be in. It is a generalised data of how well a business category is received based on the average star rating.                            
                  
iii. Output of your finished dataset:
+------------------------+-----------------+------------------+
| category               | num_of_business | avg_star_per_cat |
+------------------------+-----------------+------------------+
| Local Services         |              12 |    4.20833333333 |
| Active Life            |              10 |             4.15 |
| Health & Medical       |              17 |    4.08823529412 |
| Home Services          |              16 |              4.0 |
| Shopping               |              30 |    3.98333333333 |
| Beauty & Spas          |              13 |    3.88461538462 |
| American (Traditional) |              11 |    3.81818181818 |
| Food                   |              23 |    3.78260869565 |
| Bars                   |              17 |              3.5 |
| Nightlife              |              20 |            3.475 |
| Restaurants            |              71 |    3.45774647887 |
+------------------------+-----------------+------------------+         
         
iv. Provide the SQL code you used to create your final dataset:
SELECT C.category, COUNT(C.category) AS num_of_business, SUM(B.stars)/COUNT(C.category) AS avg_star_per_cat
FROM category C INNER JOIN business B ON B.id = C.business_id
GROUP BY C.category
HAVING num_of_business >= 10
ORDER BY avg_star_per_cat DESC

